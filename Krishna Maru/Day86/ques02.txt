class Solution {
    private:
    bool solve(int val,vector<int>& derived,vector<int>&original, int n ){
        original[0]=val;
         for(int i=0;i<n;i++){
             if(i==n-1){
                 if((~val^original[0])==derived[i]){
                     original[i]=~val;
                 }
                 if((val^original[0])==derived[i]){
                     original[i]=val;
                 }
             } 
             else{
                 // original[i+1] = 0/1
                if((~val^original[i])==derived[i]){
                     original[i+1]=~val;
                 }
                if((val^original[i])==derived[i]){
                     original[i+1]=val;
                 }
             }
         }
         vector<int>dr(n);

         for(int i=0;i<original.size();i++){
             if(i==n-1){
                dr[i]=original[i]^original[0];
             }
             else{
                 dr[i]=original[i]^original[i+1];
             }
         }
         
         return derived==dr;
    }
public:
    bool doesValidArrayExist(vector<int>& derived) {
        // int n=derived.size();
        // vector<int>original(n);
        // bool ans=solve(0,derived,original,n) or solve(1,derived,original,n);
        // return ans;
        return !reduce(begin(derived), end(derived), false, bit_xor{});

    }
};