class Solution {
public:
    int liveness(int i, int j, vector<vector<int>>&M){

        int n=M.size()-1,m=M[0].size()-1,count=0;
        /// upper side from current position
        if(i>0){
            if(j>0 && M[i-1][j-1]==1 ){
                count++;
            }
            if(M[i-1][j]==1){
                count++;
            }
            if(j<m && M[i-1][j+1]==1){
                count++;
            }
        }
        // left and right from current position
        if(j>0 && M[i][j-1]==1){
            count++;
        }
        if(j<m && M[i][j+1]==1){
            count++;
        }
        // down side from current position
        if(i<n){
            if(j>0 && M[i+1][j-1]==1 ){
                count++;
            }
            if(M[i+1][j]==1){
                count++;
            }
            if(j<m && M[i+1][j+1]==1){
                count++;
            }
        }

        return count;
        
    }
    void gameOfLife(vector<vector<int>>& board) {
        vector<vector<int>>ans=board;
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                int live_count=liveness(i,j,ans);
                    if( board[i][j]==0){
                        if(live_count==3)
                           board[i][j]=1;
                    }
                    else if(board[i][j]==1){
                    if(live_count<2 or live_count>3){
                        board[i][j]=0;
                    }
                    }
            }
        }
    }
};