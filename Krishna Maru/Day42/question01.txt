class Solution {
public:
int firstPosition(vector<int> &arr, int n, int x){
    int left=0,right=n-1;
	int mid;
	while(left<=right){
	mid=left+(right-left)/2;
	if(arr[mid]==x){
		if(mid>0 && arr[mid-1]==x){
			right=mid-1;
		}
		else{
			return mid;
		}
	}
	else if(arr[mid]<x){
		left=mid+1;
        } 
	else {
          right=mid-1;
        }

    }
	return -1;

}
int lastPosition(vector<int> &arr, int n, int x){
    int left=0,right=n-1;
	int mid;
	while(left<=right){
	mid=left+(right-left)/2;
	if(arr[mid]==x){
		if(mid>=0 && mid+1<=n-1 && arr[mid+1]==x){
			left=mid+1;
		}
		else{
			return mid;
		}
	}
	else if(arr[mid]<x){
		left=mid+1;
        } 
	else {
          right=mid-1;
        }

    }
	return -1;
}
    vector<int> searchRange(vector<int>& arr, int x) {
        int n = arr.size();
       int first=firstPosition(arr, n, x);
	int last=lastPosition(arr, n, x);
	return {first,last};
    }
};